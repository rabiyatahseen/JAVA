class Vehicle {
    void start() {
        System.out.println("Vehicle started");
    }
}

class Car extends Vehicle {
    @Override
    void start() {
        System.out.println("Car started");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle vehicle = new Vehicle();
        Car car = new Car();

        vehicle.start();
        car.start();
    }
}

class Person {
    String name;
    int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    void display() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }
}

class Employee extends Person {
    double salary;

    Employee(String name, int age, double salary) {
        super(name, age);
        this.salary = salary;
    }

    @Override
    void display() {
        super.display();
        System.out.println("Salary: " + salary);
    }
}

public class Main {
    public static void main(String[] args) {
        Person person = new Person("John Doe", 30);
        Employee employee = new Employee("Jane Smith", 25, 50000.0);

        person.display();
        System.out.println();
        employee.display();
    }
}



class Animal {
    void makeSound() {
        System.out.println("Animal sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Woof!");
    }
}

class Puppy extends Dog {
    @Override
    void makeSound() {
        System.out.println("Yap!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal = new Animal();
        Dog dog = new Dog();
        Puppy puppy = new Puppy();

        animal.makeSound();
        dog.makeSound();
        puppy.makeSound();
    }
}





class Shape {
    double getArea() {
        return 0.0; // Default implementation
    }
}

class Rectangle extends Shape {
    private double length, width;

    Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    double getArea() {
        return length * width;
    }
}

class Circle extends Shape {
    private double radius;

    Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double getArea() {
        return Math.PI * radius * radius;
    }
}

public class Main {
    public static void main(String[] args) {
        Shape shape = new Shape();
        Rectangle rectangle = new Rectangle(5.0, 3.0);
        Circle circle = new Circle(2.0);

        System.out.println("Shape area: " + shape.getArea());
        System.out.println("Rectangle area: " + rectangle.getArea());
        System.out.println("Circle area: " + circle.getArea());
    }
}





class BankAccount {
    protected double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited " + amount + ". New balance: " + balance);
    }
}

class SavingsAccount extends BankAccount {
    private double interestRate;

    public SavingsAccount(double balance, double interestRate) {
        super(balance);
        this.interestRate = interestRate;
    }

    @Override
    public void deposit(double amount) {
        super.deposit(amount);
        double interestEarned = balance * interestRate;
        balance += interestEarned;
        System.out.println("Interest earned: " + interestEarned);
    }
}

class CheckingAccount extends BankAccount {
    public CheckingAccount(double balance) {
        super(balance);
    }

    @Override
    public void deposit(double amount) {
        super.deposit(amount);
        System.out.println("Thank you for your deposit!");
    }
}

public class BankAccountHierarchy {
    public static void main(String[] args) {
        SavingsAccount savingsAccount = new SavingsAccount(1000, 0.05);
        CheckingAccount checkingAccount = new CheckingAccount(500);

        savingsAccount.deposit(500);
        checkingAccount.deposit(200);
    }
}



class Employee {
    protected String name;
    protected double salary;

    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    public void work() {
        System.out.println(name + " is working.");
    }

    public double getSalary() {
        return salary;
    }
}

class Manager extends Employee {
    public Manager(String name, double salary) {
        super(name, salary);
    }

    @Override
    public void work() {
        super.work();
        System.out.println(name + " is also managing tasks.");
    }
}

class Developer extends Employee {
    public Developer(String name, double salary) {
        super(name, salary);
    }

    public void writeCode() {
        System.out.println(name + " is writing code.");
    }
}

public class EmployeeHierarchy {
    public static void main(String[] args) {
        Manager manager = new Manager("John Doe", 5000);
        Developer developer = new Developer("Jane Smith", 4000);

        manager.work();
        System.out.println("Manager's salary: " + manager.getSalary());
        developer.work();
        developer.writeCode();
        System.out.println("Developer's salary: " + developer.getSalary());
    }
}



class Animal {
    public void move() {
        System.out.println("The animal is moving.");
    }
}

class Bird extends Animal {
    @Override
    public void move() {
        System.out.println("The bird is flying.");
    }
}

class Fish extends Animal {
    @Override
    public void move() {
        System.out.println("The fish is swimming.");
    }
}

public class AnimalMovement {
    public static void main(String[] args) {
        Bird bird = new Bird();
        Fish fish = new Fish();

        bird.move();
        fish.move();
    }
}


class Animal {
    String name;

    Animal(String name) {
        this.name = name;
    }

    void makeSound() {
        System.out.println("Generic animal sound");
    }
}

class Dog extends Animal {
    Dog(String name) {
        super(name); // Calls the parent class's constructor
    }

    @Override
    void makeSound() {
        System.out.println("Woof!");
        super.makeSound(); // Calls the parent class's method
    }
}

class Cat extends Animal {
    Cat(String name) {
        super(name);
    }

    @Override
    void makeSound() {
        System.out.println("Meow!");
    }
}

public class AnimalDemo {
    public static void main(String[] args) {
        Dog fido = new Dog("Fido");
        Cat whiskers = new Cat("Whiskers");

        fido.makeSound();
        whiskers.makeSound();
    }
}