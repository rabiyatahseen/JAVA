interface Vehicle {
    void start();
    void stop();
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car started.");
    }

    public void stop() {
        System.out.println("Car stopped.");
    }
}

class Bike implements Vehicle {
    public void start() {
        System.out.println("Bike started.");
    }

    public void stop() {
        System.out.println("Bike stopped.");
    }
}

public class InterfaceExample {
    public static void main(String[] args) {
        Vehicle car = new Car();
        Vehicle bike = new Bike();

        car.start();
        car.stop();

        bike.start();
        bike.stop();
    }
}





class Animal {
    void makeSound() {
        System.out.println("Generic animal sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Woof!");
    }
}

class Cat extends Animal {
    @Override
    void makeSound() {
        System.out.println("Meow!");
    }
}

public class RuntimePolymorphismExample {
    public static void main(String[] args) {
        Animal[] animals = {new Dog(), new Cat()};

        for (Animal animal : animals) {
            animal.makeSound();
        }
    }
}





public class ExceptionExample {
    public static void main(String[] args) {
        try {
            int num = Integer.parseInt("abc"); // Will throw a NumberFormatException
            System.out.println("The number is: " + num);

            int result = 10 / 0; // Will throw an ArithmeticException
            System.out.println("The result is: " + result);

            String str = null;
            System.out.println(str.length()); // Will throw a NullPointerException
        } catch (NumberFormatException e) {
            System.out.println("NumberFormatException: " + e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException: " + e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("NullPointerException: " + e.getMessage());
        }
    }
}



class MyCustomException extends Exception {
    public MyCustomException(String message) {
        super(message);
    }
}

public class UserDefinedExceptionExample {
    public static void main(String[] args) {
        try {
            int age = 15;
            if (age < 18) {
                throw new MyCustomException("You are not eligible to vote.");
            }
            System.out.println("You are eligible to vote.");
        } catch (MyCustomException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}